---
description: 
globs: 
alwaysApply: false
---
# Rule: Gemini Playwright Integration Details

**Goal:** Consolidate findings from Epic 8 regarding the Gemini (gemini.google.com) web UI analysis and Playwright scripting logic for use in the main application (`app/playwright_handler.py`).

## 1. UI Flow & Logic

The sequence for submitting a prompt via Playwright to a logged-in Gemini instance is:

1.  **Connect & Find Page:** Connect to the browser via CDP and locate the correct page object whose URL contains `gemini.google.com`.
2.  **Ensure New Chat State:**
    *   Check if the "New chat" button is visible and enabled. If so, click it to handle cases where a previous chat might be active.
    *   Wait for the main text input area to become visible after potentially clicking "New chat" (or upon initial load).
3.  **Enter Prompt:** Locate the main text input area (`div.ql-editor[role="textbox"]`) and fill it with the prompt text.
4.  **Submit Prompt:**
    *   Locate the Submit button (`button[aria-label="Send message"]`).
    *   Wait for the Submit button to be *enabled* (specifically `:not([aria-disabled="true"])`).
    *   Click the Submit button.
5.  **Wait for Result & Capture URL:**
    *   Wait for the "thinking" element (`model-thoughts`) to become visible. This indicates the submission is being processed and the URL has likely updated. Using `.first` on the locator is recommended.
    *   *Immediately* after the `model-thoughts` element is visible, capture the current page URL (`page.url`).

## 2. Key Selectors

*   **New Chat Button (Optional):** `expandable-button[data-test-id="new-chat-button"] button:not([disabled])`
*   **Text Input Area:** `div.ql-editor[role="textbox"][aria-label="Enter a prompt here"]`
*   **Submit Button (Enabled State):** `button[aria-label="Send message"]:not([aria-disabled="true"])`
*   **"Thinking" Indicator Element:** `model-thoughts`

## 3. URL Pattern

*   The final URL for a specific chat session follows the pattern: `https://gemini.google.com/u/{digits}/app/{hex_string}` (e.g., `https://gemini.google.com/u/1/app/42e0b997a228794b`).
*   The Playwright `wait_for_url` pattern used successfully *after* the thinking element appears is: `**/u/[0-9]+/app/[0-9a-fA-F]+` (though capturing `page.url` directly after waiting for `model-thoughts` is the primary method).

## 4. Playwright Commands & Waiting Strategy

*   **Page Finding:** Iterate through `context.pages` and find the one where `page.url` contains `gemini.google.com`.
*   **Waiting:**
    *   Use `expect(locator).to_be_visible(timeout=...)` before interacting or checking other states (like the optional New Chat button or the text input).
    *   Use `expect(locator).to_be_enabled(timeout=...)` specifically for the Submit button (`:not([aria-disabled="true"])`).
    *   **Crucially:** Use `page.locator('model-thoughts').first.wait_for(state='visible', timeout=...)` as the primary mechanism to detect successful submission processing. A long timeout (e.g., 90 seconds) is recommended here.
    *   Capture `page.url` *immediately* after the `model-thoughts` wait succeeds.
    *   Use short `page.wait_for_timeout()` pauses (e.g., 300-500ms) sparingly after actions like `fill` or `click` if needed for UI stabilization, but prefer explicit waits.
*   **Error Handling:** Implement `try...except PlaywrightTimeoutError` and general `Exception` blocks around the automation steps. Consider taking a screenshot on error.

## 5. Implementation Notes

*   These selectors and logic should be implemented within functions in `app/playwright_handler.py`, likely an async function like `submit_prompt_gemini(page: Page, prompt: str) -> str | None`.
*   Remember that the browser must be launched/connected via CDP with the correct debugging port, and the user must be logged in. Connection is handled via `p.chromium.connect_over_cdp(url)`.
*   The "Ensure New Chat State" step is optional but recommended for robustness. Handle the `TimeoutError` gracefully if the button isn't found, assuming the page is already in the correct state.
